{"ast":null,"code":"var _jsxFileName = \"/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import PlacesAutocomplete from 'react-places-autocomplete'\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n// import ReactStreetview from 'react-streetview';\n\nimport Streetview from 'react-google-streetview';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  console.log(props);\n  let navigate = useNavigate();\n  const [address, setAddress] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  });\n  useEffect(() => {\n    props.updateAddress(address);\n    props.updateCoordinates(coordinates);\n  }, [address]);\n\n  const handleChange = value => {\n    setUserInput(value);\n  }; // const handleSelect = (value) => {\n  //     console.log('handle select', address)\n  //     setAddress(value)\n  //     props.updateAddress(address)\n  //     localStorage.setItem(\"address\", value)\n  //     // navigate('/apartment-view')\n  //     geocodeByAddress(value)\n  //         .then(results => getLatLng(results[0]))\n  //         .then(latLng => console.log('Success', latLng))\n  //         .catch(error => console.error('Error', error))\n  //     ;\n  // }\n\n\n  const handleSelect = async value => {\n    console.log('in handleSelect', address);\n    console.log('in handleSelect', coordinates);\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]); // setCoordinates(...latLng, latLng);\n\n    setCoordinates(prevCoords => ({ ...prevCoords,\n      lat: latLng.lat,\n      lng: latLng.lng\n    }));\n    setAddress(value);\n    props.updateAddress(address);\n    props.updateCoordinates(coordinates);\n    localStorage.setItem(\"address\", value);\n    localStorage.setItem(\"coords\", latLng); // navigate('/apartment-view')\n  }; //example lat was 46.9171876\n  //example lng was 17.8951832\n\n\n  const streetViewPanoramaOptions = {\n    position: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    pov: {\n      heading: 100,\n      pitch: 0\n    },\n    zoom: 1\n  };\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '800px',\n          height: '450px',\n          backgroundColor: '#eeeeee'\n        },\n        children: /*#__PURE__*/_jsxDEV(Streetview, {\n          apiKey: process.env.REACT_APP_GOOGLE_MAP_API,\n          streetViewPanoramaOptions: streetViewPanoramaOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: userInput,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Enter Address ...\",\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 45\n              }, this), suggestions.map((suggestion, key) => {\n                const style = suggestion.active ? {\n                  backgroundColor: \"#4287f5\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                key = suggestion.description;\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 45\n                  }, this)\n                }, suggestion.description, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"TEDnL0atdSvD7F2C1Kd+ckXvxgA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useEffect","useState","useNavigate","Streetview","PlacesAutocomplete","geocodeByAddress","getLatLng","scriptLoader","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","console","log","navigate","address","setAddress","userInput","setUserInput","coordinates","setCoordinates","lat","lng","updateAddress","updateCoordinates","handleChange","value","handleSelect","results","latLng","prevCoords","localStorage","setItem","streetViewPanoramaOptions","position","pov","heading","pitch","zoom","width","height","backgroundColor","process","env","REACT_APP_GOOGLE_MAP_API","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","key","style","active","cursor","description"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n// import PlacesAutocomplete from 'react-places-autocomplete'\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n// import ReactStreetview from 'react-streetview';\nimport Streetview from 'react-google-streetview';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader'\n\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n    console.log(props)\n\n    let navigate = useNavigate()\n\n    const [address, setAddress] = useState(\"\");\n\n    const [userInput, setUserInput] = useState(\"\");\n\n    const [coordinates, setCoordinates] = useState({\n        lat: null,\n        lng: null,\n    });\n\n    useEffect(() => {\n        props.updateAddress(address)\n        props.updateCoordinates(coordinates)\n    }, [address])\n\n    const handleChange = (value) => {\n        setUserInput(value)\n    }\n\n    // const handleSelect = (value) => {\n    //     console.log('handle select', address)\n    //     setAddress(value)\n    //     props.updateAddress(address)\n    //     localStorage.setItem(\"address\", value)\n    //     // navigate('/apartment-view')\n\n    //     geocodeByAddress(value)\n    //         .then(results => getLatLng(results[0]))\n    //         .then(latLng => console.log('Success', latLng))\n    //         .catch(error => console.error('Error', error))\n    //     ;\n\n    // }\n\n    const handleSelect = async (value) => {\n        console.log('in handleSelect', address)\n        console.log('in handleSelect', coordinates)\n\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n\n        // setCoordinates(...latLng, latLng);\n        setCoordinates(prevCoords => ({\n            ...prevCoords,\n            lat: latLng.lat,\n            lng: latLng.lng\n        }));\n       \n        setAddress(value)\n        props.updateAddress(address)\n        props.updateCoordinates(coordinates)\n        localStorage.setItem(\"address\", value)\n        localStorage.setItem(\"coords\", latLng)\n        // navigate('/apartment-view')\n    }\n\n\n    //example lat was 46.9171876\n    //example lng was 17.8951832\n    const streetViewPanoramaOptions = {\n        position: { lat: coordinates.lat, lng: coordinates.lng },\n        pov: { heading: 100, pitch: 0 },\n        zoom: 1\n    };\n\n    if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n        return (\n            <div>\n\n\n                <div style={{\n                    width: '800px',\n                    height: '450px',\n                    backgroundColor: '#eeeeee'\n                }}>\n                    <Streetview\n                        apiKey={process.env.REACT_APP_GOOGLE_MAP_API}\n                        streetViewPanoramaOptions={streetViewPanoramaOptions}\n                    />\n                </div>\n\n\n                <PlacesAutocomplete value={userInput} onChange={handleChange} onSelect={handleSelect}>\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input {...getInputProps({\n                                placeholder: \"Enter Address ...\",\n                                className: 'location-search-input'\n                            })} />\n\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n\n                                {suggestions.map((suggestion, key) => {\n                                    const style = suggestion.active ?\n                                        { backgroundColor: \"#4287f5\", cursor: \"pointer\" } :\n                                        { backgroundColor: \"#ffffff\", cursor: \"pointer\" }\n                                    key = suggestion.description;\n\n                                    return (\n                                        <div key={suggestion.description} {...getSuggestionItemProps(suggestion, { style })}>\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    )\n                                })\n\n                                }\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n            </div>\n        )\n    } else {\n        return (\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n"]},"metadata":{},"sourceType":"module"}