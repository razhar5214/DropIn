{"ast":null,"code":"var _jsxFileName = \"/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader';\nimport Autocomplete from \"react-google-autocomplete\";\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  console.log(props);\n  const [address, setAddress] = useState(\"\");\n  let navigate = useNavigate();\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = value => {\n    setAddress(value);\n    props.updateAddress(address);\n    localStorage.setItem(\"address\", value);\n    navigate('/apartment-view');\n  };\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GooglePlacesAutocomplete, {\n        placeholder: \"Search\",\n        apiKey: process.env.REACT_APP_GOOGLE_MAP_API // selectProps={{\n        //     value,\n        //     onChange: setValue,\n        // }}\n        ,\n        selectProps: place => {\n          console.log(place);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"cY6JvwrVhcEkoEwJ5lZGqbJEccg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useState","useNavigate","PlacesAutocomplete","scriptLoader","Autocomplete","GooglePlacesAutocomplete","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","console","log","address","setAddress","navigate","handleChange","value","handleSelect","updateAddress","localStorage","setItem","process","env","REACT_APP_GOOGLE_MAP_API","place"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,wBAAP,MAAqC,kCAArC;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,cAA3B,EAA2CC,mBAA3C,EAAgE;AAAA;;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEA,MAAIc,QAAQ,GAAGb,WAAW,EAA1B;;AAEA,QAAMc,YAAY,GAAIC,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV;AACAT,IAAAA,KAAK,CAACW,aAAN,CAAoBN,OAApB;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCJ,KAAhC;AACAF,IAAAA,QAAQ,CAAC,iBAAD,CAAR;AACH,GALD;;AAOA,MAAIP,KAAK,CAACC,cAAN,IAAwBD,KAAK,CAACE,mBAAlC,EAAuD;AACnD,wBACI;AAAA,6BAuCI,QAAC,wBAAD;AACA,QAAA,WAAW,EAAC,QADZ;AAGI,QAAA,MAAM,EAAEY,OAAO,CAACC,GAAR,CAAYC,wBAHxB,CAII;AACA;AACA;AACA;AAPJ;AASI,QAAA,WAAW,EAAGC,KAAD,IAAW;AACpBd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH;AAXL;AAAA;AAAA;AAAA;AAAA;AAvCJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAwDH,GAzDD,MAyDO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ;;GA/EQlB,U;UAIUL,W;;;KAJVK,U;AAgFT,eAAeH,YAAY,CAAC,CAAE,+CAA8CkB,OAAO,CAACC,GAAR,CAAYC,wBAAyB,mBAArF,CAAD,CAAZ,CAAuHjB,UAAvH,CAAf","sourcesContent":["import React from \"react\"\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport PlacesAutocomplete from 'react-places-autocomplete'\nimport scriptLoader from 'react-async-script-loader'\n\nimport Autocomplete from \"react-google-autocomplete\";\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n    console.log(props);\n    const [address, setAddress] = useState(\"\");\n\n    let navigate = useNavigate()\n\n    const handleChange = (value) => {\n        setAddress(value)\n    }\n\n    const handleSelect = (value) => {\n        setAddress(value)\n        props.updateAddress(address)\n        localStorage.setItem(\"address\", value)\n        navigate('/apartment-view')\n    }\n\n    if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n        return (\n            <div>\n\n                {/* <PlacesAutocomplete value={address} onChange={handleChange} onSelect={handleSelect}>\n                {({getInputProps, suggestions, getSuggestionItemProps, loading})=>(\n                    <div>\n                        <input {...getInputProps({\n                            placeholder: \"Enter Address ...\"\n                        })}/>\n                    \n                        <div>\n                        {loading && <div>Loading...</div>}\n\n                        {suggestions.map((suggestion, key)=>{\n                            const style = suggestion.active? \n                            {backgroundColor: \"#4287f5\", cursor: \"pointer\"} : \n                            {backgroundColor: \"#ffffff\", cursor: \"pointer\"}\n                            key = suggestion.description;\n                            return (\n                                <div key = {suggestion.description} {...getSuggestionItemProps(suggestion, {style})}>\n                                    {suggestion.description}\n                                </div>\n                            )\n                        })\n\n                        }\n                        </div>\n                    </div>\n                )}\n                </PlacesAutocomplete> */}\n\n\n\n                {/* <Autocomplete\n                    apiKey={process.env.REACT_APP_GOOGLE_MAP_API}\n                    onPlaceSelected={(place) => {\n                        console.log(place);\n                    }}\n                />; */}\n\n                <GooglePlacesAutocomplete\n                placeholder='Search'\n                \n                    apiKey={process.env.REACT_APP_GOOGLE_MAP_API}\n                    // selectProps={{\n                    //     value,\n                    //     onChange: setValue,\n                    // }}\n                    \n                    selectProps={(place) => {\n                        console.log(place);\n                    }}\n                />\n\n            </div>\n        )\n    } else {\n        return (\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n"]},"metadata":{},"sourceType":"module"}