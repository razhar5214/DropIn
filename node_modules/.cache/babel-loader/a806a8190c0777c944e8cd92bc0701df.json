{"ast":null,"code":"var _jsxFileName = \"/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader';\nimport Autocomplete from \"react-google-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  console.log(props);\n  const [address, setAddress] = useState(\"\");\n  let navigate = useNavigate();\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = value => {\n    setAddress(value);\n    props.updateAddress(address);\n    localStorage.setItem(\"address\", value);\n    navigate('/apartment-view');\n  };\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        apiKey: YOUR_GOOGLE_MAPS_API_KEY,\n        onPlaceSelected: place => {\n          console.log(place);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 1\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"cY6JvwrVhcEkoEwJ5lZGqbJEccg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useState","useNavigate","PlacesAutocomplete","scriptLoader","Autocomplete","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","console","log","address","setAddress","navigate","handleChange","value","handleSelect","updateAddress","localStorage","setItem","YOUR_GOOGLE_MAPS_API_KEY","place","process","env","REACT_APP_GOOGLE_MAP_API"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,cAA3B,EAA2CC,mBAA3C,EAA+D;AAAA;;AAC3DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AAEA,MAAIa,QAAQ,GAAGZ,WAAW,EAA1B;;AAEA,QAAMa,YAAY,GAAIC,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV;AACAT,IAAAA,KAAK,CAACW,aAAN,CAAoBN,OAApB;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCJ,KAAhC;AACAF,IAAAA,QAAQ,CAAC,iBAAD,CAAR;AACH,GALD;;AAOA,MAAGP,KAAK,CAACC,cAAN,IAAwBD,KAAK,CAACE,mBAAjC,EAAqD;AACjD,wBACI;AAAA,8BA+BZ,QAAC,YAAD;AACE,QAAA,MAAM,EAAEY,wBADV;AAEE,QAAA,eAAe,EAAGC,KAAD,IAAW;AAC1BZ,UAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,cA/BY;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwCH,GAzCD,MAyCM;AACF,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ;;GA/DQhB,U;UAIUJ,W;;;KAJVI,U;AAgET,eAAeF,YAAY,CAAC,CAAE,+CAA8CmB,OAAO,CAACC,GAAR,CAAYC,wBAAyB,mBAArF,CAAD,CAAZ,CAAuHnB,UAAvH,CAAf","sourcesContent":["import React from \"react\"\nimport {useState} from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport PlacesAutocomplete from 'react-places-autocomplete'\nimport scriptLoader from 'react-async-script-loader'\n\nimport Autocomplete from \"react-google-autocomplete\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed){\n    console.log(props); \n    const [address, setAddress] = useState(\"\");\n    \n    let navigate = useNavigate()\n\n    const handleChange = (value) => {\n        setAddress(value) \n    }\n\n    const handleSelect = (value) => {\n        setAddress(value)\n        props.updateAddress(address)\n        localStorage.setItem(\"address\", value)\n        navigate('/apartment-view')\n    }\n\n    if(props.isScriptLoaded && props.isScriptLoadSucceed){\n        return(\n            <div>\n                \n                {/* <PlacesAutocomplete value={address} onChange={handleChange} onSelect={handleSelect}>\n                {({getInputProps, suggestions, getSuggestionItemProps, loading})=>(\n                    <div>\n                        <input {...getInputProps({\n                            placeholder: \"Enter Address ...\"\n                        })}/>\n                    \n                        <div>\n                        {loading && <div>Loading...</div>}\n\n                        {suggestions.map((suggestion, key)=>{\n                            const style = suggestion.active? \n                            {backgroundColor: \"#4287f5\", cursor: \"pointer\"} : \n                            {backgroundColor: \"#ffffff\", cursor: \"pointer\"}\n                            key = suggestion.description;\n                            return (\n                                <div key = {suggestion.description} {...getSuggestionItemProps(suggestion, {style})}>\n                                    {suggestion.description}\n                                </div>\n                            )\n                        })\n\n                        }\n                        </div>\n                    </div>\n                )}\n                </PlacesAutocomplete> */}\n\n\n<Autocomplete\n  apiKey={YOUR_GOOGLE_MAPS_API_KEY}\n  onPlaceSelected={(place) => {\n    console.log(place);\n  }}\n/>;\n            </div>\n        )\n    } else{\n        return(\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n "]},"metadata":{},"sourceType":"module"}