{"ast":null,"code":"var _jsxFileName = \"/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import PlacesAutocomplete from 'react-places-autocomplete'\n// import ReactStreetview from 'react-streetview';\n\nimport Streetview from 'react-google-streetview';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader'; // import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  console.log(props);\n  const [address, setAddress] = useState({\n    coordinates: {\n      lat: null,\n      lng: null\n    }\n  });\n  let navigate = useNavigate();\n  let LAT; //new\n\n  let LNG; //new\n\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleChange = value => {\n    setAddress(value);\n  }; // const handleSelect = (value) => {\n  //     console.log('handle select', address)\n  //     setAddress(value)\n  //     props.updateAddress(address)\n  //     localStorage.setItem(\"address\", value)\n  //     // navigate('/apartment-view')\n  //     geocodeByAddress(value)\n  //         .then(results => getLatLng(results[0]))\n  //         .then(latLng => console.log('Success', latLng))\n  //         .catch(error => console.error('Error', error))\n  //     ;\n  // }\n\n\n  const handleSelect = async value => {\n    console.log('handle select', address);\n    setAddress(value);\n    props.updateAddress(address);\n    localStorage.setItem(\"address\", value); // navigate('/apartment-view')\n\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setCoordinates(latLng);\n    console.log(coordinates);\n  }; //lat was 46.9171876\n  //lng was 17.8951832\n\n\n  let latlat;\n  let longlong;\n  const streetViewPanoramaOptions = {\n    position: {\n      lat: 46.9171876,\n      lng: 17.8951832\n    },\n    pov: {\n      heading: 100,\n      pitch: 0\n    },\n    zoom: 1\n  };\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '800px',\n          height: '450px',\n          backgroundColor: '#eeeeee'\n        },\n        children: /*#__PURE__*/_jsxDEV(Streetview, {\n          apiKey: process.env.REACT_APP_GOOGLE_MAP_API,\n          streetViewPanoramaOptions: streetViewPanoramaOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Enter Address ...\",\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 45\n              }, this), suggestions.map((suggestion, key) => {\n                const style = suggestion.active ? {\n                  backgroundColor: \"#4287f5\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                key = suggestion.description;\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 45\n                  }, this)\n                }, suggestion.description, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"RHZJPdFoCI5YKiKekt3RoXu5HlU=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useState","useNavigate","Streetview","PlacesAutocomplete","geocodeByAddress","getLatLng","scriptLoader","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","console","log","address","setAddress","coordinates","lat","lng","navigate","LAT","LNG","setCoordinates","handleChange","value","handleSelect","updateAddress","localStorage","setItem","results","latLng","latlat","longlong","streetViewPanoramaOptions","position","pov","heading","pitch","zoom","width","height","backgroundColor","process","env","REACT_APP_GOOGLE_MAP_API","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","key","style","active","cursor","description"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n// import PlacesAutocomplete from 'react-places-autocomplete'\n\n\n// import ReactStreetview from 'react-streetview';\nimport Streetview from 'react-google-streetview';\n\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\n\n\nimport scriptLoader from 'react-async-script-loader'\n\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n    console.log(props);\n    const [address, setAddress] = useState({ coordinates:{lat: null,lng: null} })\n\n    let navigate = useNavigate()\n\n    let LAT //new\n    let LNG //new\n    const [coordinates, setCoordinates] = useState({\n        lat: null,\n        lng: null,\n      });\n\n    const handleChange = (value) => {\n        setAddress(value)\n    }\n\n    // const handleSelect = (value) => {\n    //     console.log('handle select', address)\n    //     setAddress(value)\n    //     props.updateAddress(address)\n    //     localStorage.setItem(\"address\", value)\n    //     // navigate('/apartment-view')\n\n    //     geocodeByAddress(value)\n    //         .then(results => getLatLng(results[0]))\n    //         .then(latLng => console.log('Success', latLng))\n    //         .catch(error => console.error('Error', error))\n    //     ;\n            \n    // }\n\n\n    const handleSelect = async(value) => {\n        console.log('handle select', address)\n        setAddress(value)\n        props.updateAddress(address)\n        localStorage.setItem(\"address\", value)\n        // navigate('/apartment-view')\n\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n        \n        setCoordinates(latLng);\n\n        console.log(coordinates)\n    }\n\n\n    //lat was 46.9171876\n    //lng was 17.8951832\n    let latlat\n    let longlong \n    const streetViewPanoramaOptions = {\n        position: { lat: 46.9171876, lng: 17.8951832 },\n        pov: { heading: 100, pitch: 0 },\n        zoom: 1\n    };\n\n\n    if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n        return (\n            <div>\n\n\n                <div style={{\n                    width: '800px',\n                    height: '450px',\n                    backgroundColor: '#eeeeee'\n                }}>\n                    <Streetview\n                        apiKey={process.env.REACT_APP_GOOGLE_MAP_API}\n                        streetViewPanoramaOptions={streetViewPanoramaOptions}\n                    />\n                </div>\n\n\n\n                <PlacesAutocomplete value={address} onChange={handleChange} onSelect={handleSelect}>\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input {...getInputProps({\n                                placeholder: \"Enter Address ...\",\n                                className: 'location-search-input'\n                            })} />\n\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n\n                                {suggestions.map((suggestion, key) => {\n                                    const style = suggestion.active ?\n                                        { backgroundColor: \"#4287f5\", cursor: \"pointer\" } :\n                                        { backgroundColor: \"#ffffff\", cursor: \"pointer\" }\n                                    key = suggestion.description;\n\n                                    return (\n                                        <div key={suggestion.description} {...getSuggestionItemProps(suggestion, { style })}>\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    )\n                                })\n\n                                }\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n            </div>\n        )\n    } else {\n        return (\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n"]},"metadata":{},"sourceType":"module"}