{"ast":null,"code":"var _jsxFileName = \"/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import PlacesAutocomplete from 'react-places-autocomplete'\n\nimport Autocomplete from \"react-google-autocomplete\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader'; // import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  console.log(props);\n  const [address, setAddress] = useState(\"\");\n  let navigate = useNavigate();\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = value => {\n    console.log('handle select', address);\n    setAddress(value);\n    props.updateAddress(address);\n    localStorage.setItem(\"address\", value);\n    navigate('/apartment-view');\n    geocodeByAddress(value).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n  };\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StreetView, {\n        address: \"Address goes here\",\n        APIkey: \"google maps api key\",\n        streetView: true,\n        zoomLevel: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Enter Address ...\",\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 45\n              }, this), suggestions.map((suggestion, key) => {\n                const style = suggestion.active ? {\n                  backgroundColor: \"#4287f5\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                key = suggestion.description;\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 45\n                  }, this)\n                }, suggestion.description, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"cY6JvwrVhcEkoEwJ5lZGqbJEccg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/shakhram/DropIn_FrontEnd/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useState","useNavigate","Autocomplete","PlacesAutocomplete","geocodeByAddress","getLatLng","scriptLoader","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","console","log","address","setAddress","navigate","handleChange","value","handleSelect","updateAddress","localStorage","setItem","then","results","latLng","catch","error","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","key","style","active","backgroundColor","cursor","description","process","env","REACT_APP_GOOGLE_MAP_API"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n// import PlacesAutocomplete from 'react-places-autocomplete'\nimport Autocomplete from \"react-google-autocomplete\";\n\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\n\n\nimport scriptLoader from 'react-async-script-loader'\n\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n    console.log(props);\n    const [address, setAddress] = useState(\"\");\n\n    let navigate = useNavigate()\n\n    const handleChange = (value) => {\n        setAddress(value)\n    }\n\n    const handleSelect = (value) => {\n        console.log('handle select', address)\n        setAddress(value)\n        props.updateAddress(address)\n        localStorage.setItem(\"address\", value)\n        navigate('/apartment-view')\n\n        geocodeByAddress(value)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => console.log('Success', latLng))\n            .catch(error => console.error('Error', error));\n    }\n\n    if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n        return (\n            <div>\n\n\n                <StreetView address=\"Address goes here\" APIkey=\"google maps api key\" streetView zoomLevel={15} />\n\n\n                <PlacesAutocomplete value={address} onChange={handleChange} onSelect={handleSelect}>\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input {...getInputProps({\n                                placeholder: \"Enter Address ...\",\n                                className: 'location-search-input'\n                            })} />\n\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n\n                                {suggestions.map((suggestion, key) => {\n                                    const style = suggestion.active ?\n                                        { backgroundColor: \"#4287f5\", cursor: \"pointer\" } :\n                                        { backgroundColor: \"#ffffff\", cursor: \"pointer\" }\n                                    key = suggestion.description;\n\n                                    return (\n                                        <div key={suggestion.description} {...getSuggestionItemProps(suggestion, { style })}>\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    )\n                                })\n\n                                }\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n            </div>\n        )\n    } else {\n        return (\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n"]},"metadata":{},"sourceType":"module"}