{"ast":null,"code":"var _jsxFileName = \"/Users/awais01/Desktop/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(_ref) {\n  _s();\n\n  let {\n    isScriptLoaded,\n    isScriptLoadSucceed,\n    props\n  } = _ref;\n  console.log([props]);\n  const [address, setAddress] = useState(\"\");\n  let navigate = useNavigate();\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = value => {\n    setAddress(value); // props.updateAddress(address);\n\n    localStorage.setItem(\"address\", address);\n    console.log('in autosearch.js', address);\n    navigate('/apartment-view');\n  };\n\n  if (isScriptLoaded && isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: _ref2 => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Enter Address ...\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 37\n              }, this), suggestions.map(suggestion => {\n                const style = suggestion.active ? {\n                  backgroundColor: \"#4287f5\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    style\n                  }),\n                  children: suggestion.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 33\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"cY6JvwrVhcEkoEwJ5lZGqbJEccg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/awais01/Desktop/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useState","useNavigate","PlacesAutocomplete","scriptLoader","AutoSearch","isScriptLoaded","isScriptLoadSucceed","props","console","log","address","setAddress","navigate","handleChange","value","handleSelect","localStorage","setItem","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","active","backgroundColor","cursor","description","process","env","REACT_APP_GOOGLE_MAP_API"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;;AAIA,SAASC,UAAT,OAAiE;AAAA;;AAAA,MAA7C;AAACC,IAAAA,cAAD;AAAiBC,IAAAA,mBAAjB;AAAsCC,IAAAA;AAAtC,GAA6C;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,KAAD,CAAZ;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AAEA,MAAIY,QAAQ,GAAGX,WAAW,EAA1B;;AAEA,QAAMY,YAAY,GAAIC,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV;AACH,GAFD;;AAGA,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC5BH,IAAAA,UAAU,CAACG,KAAD,CAAV,CAD4B,CAE5B;;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCP,OAAhC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,OAAhC;AACAE,IAAAA,QAAQ,CAAC,iBAAD,CAAR;AACH,GAND;;AAOA,MAAGP,cAAc,IAAIC,mBAArB,EAAyC;AACrC,wBACI;AAAA,6BACI,QAAC,kBAAD;AAAoB,QAAA,KAAK,EAAEI,OAA3B;AAAoC,QAAA,QAAQ,EAAEG,YAA9C;AAA4D,QAAA,QAAQ,EAAEE,YAAtE;AAAA,kBACC;AAAA,cAAC;AAACG,YAAAA,aAAD;AAAgBC,YAAAA,WAAhB;AAA6BC,YAAAA,sBAA7B;AAAqDC,YAAAA;AAArD,WAAD;AAAA,8BACG;AAAA,oCACI,sBAAWH,aAAa,CAAC;AACrBI,gBAAAA,WAAW,EAAE;AADQ,eAAD;AAAxB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI;AAAA,yBACCD,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADZ,EAGCF,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAc;AAC3B,sBAAMC,KAAK,GAAGD,UAAU,CAACE,MAAX,GACd;AAACC,kBAAAA,eAAe,EAAE,SAAlB;AAA6BC,kBAAAA,MAAM,EAAE;AAArC,iBADc,GAEd;AAACD,kBAAAA,eAAe,EAAE,SAAlB;AAA6BC,kBAAAA,MAAM,EAAE;AAArC,iBAFA;AAIA,oCACI,oBAASR,sBAAsB,CAACI,UAAD,EAAa;AAACC,oBAAAA;AAAD,mBAAb,CAA/B;AAAA,4BACKD,UAAU,CAACK;AADhB;AAAA;AAAA;AAAA;AAAA,wBADJ;AAKH,eAVA,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH,GAjCD,MAiCK;AACD,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ;;GAtDQzB,U;UAIUH,W;;;KAJVG,U;AAuDT,eAAeD,YAAY,CAAC,CAAE,+CAA8C2B,OAAO,CAACC,GAAR,CAAYC,wBAAyB,mBAArF,CAAD,CAAZ,CAAuH5B,UAAvH,CAAf","sourcesContent":["import React from \"react\"\nimport {useState} from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport PlacesAutocomplete from 'react-places-autocomplete'\nimport scriptLoader from 'react-async-script-loader'\n\n\n\nfunction AutoSearch({isScriptLoaded, isScriptLoadSucceed, props}){\n    console.log([props]);\n    const [address, setAddress] = useState(\"\");\n\n    let navigate = useNavigate();\n\n    const handleChange = (value) => {\n        setAddress(value);\n    }\n    const handleSelect = (value) => {\n        setAddress(value);\n        // props.updateAddress(address);\n        localStorage.setItem(\"address\", address)\n        console.log('in autosearch.js', address)\n        navigate('/apartment-view')\n    }\n    if(isScriptLoaded && isScriptLoadSucceed){\n        return(\n            <div>\n                <PlacesAutocomplete value={address} onChange={handleChange} onSelect={handleSelect}>\n                {({getInputProps, suggestions, getSuggestionItemProps, loading})=>(\n                    <div>\n                        <input {...getInputProps({\n                            placeholder: \"Enter Address ...\"\n                        })}/>\n                    \n                        <div>\n                        {loading && <div>Loading...</div>}\n\n                        {suggestions.map((suggestion)=>{\n                            const style = suggestion.active? \n                            {backgroundColor: \"#4287f5\", cursor: \"pointer\"} : \n                            {backgroundColor: \"#ffffff\", cursor: \"pointer\"}\n\n                            return (\n                                <div {...getSuggestionItemProps(suggestion, {style})}>\n                                    {suggestion.description}\n                                </div>\n                            )\n                        })\n\n                        }\n                        </div>\n                    </div>\n                )}\n                </PlacesAutocomplete>\n\n            </div>\n        )\n    }else{\n        return(\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n "]},"metadata":{},"sourceType":"module"}