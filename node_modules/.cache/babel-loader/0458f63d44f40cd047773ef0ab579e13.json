{"ast":null,"code":"var _jsxFileName = \"/Users/awais01/Desktop/DropIn_FrontEnd/src/components/AutoSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import PlacesAutocomplete from 'react-places-autocomplete'\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n// import ReactStreetview from 'react-streetview';\n// import Streetview from 'react-google-streetview';\n\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n  _s();\n\n  // console.log(props)\n  var dataFromAPI;\n  let navigate = useNavigate();\n  const [address, setAddress] = useState(\"\"); //const [lat, setLat] = useState('')\n  //const [lng, setLng] = useState('')\n\n  const [userInput, setUserInput] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  });\n  useEffect(() => {// props.updateAddress(address)\n    // props.updateCoordinates(coordinates)\n  }, []);\n\n  const handleChange = value => {\n    setUserInput(value);\n  }; // const handleSelect = (value) => {\n  //     console.log('handle select', address)\n  //     setAddress(value)\n  //     props.updateAddress(address)\n  //     localStorage.setItem(\"address\", value)\n  //     // navigate('/apartment-view')\n  //     geocodeByAddress(value)\n  //         .then(results => getLatLng(results[0]))\n  //         .then(latLng => console.log('Success', latLng))\n  // .then(({ lat, lng }) => {\n  //      NProgress.done()\n  //      setCoordinates({ lat : lat, lng : lng })\n  //         .catch(error => console.error('Error', error))\n  //     ;\n  // }\n  // const setStates = async (latLng) => {\n  //     setLat(latLng.lat)\n  //     setLng(latLng.lng)\n  //     console.log('my lat object', lat)\n  //     console.log('my lng object', lng)\n  // }\n\n\n  const setCoordinatesFunction = dataFromAPI => {\n    setCoordinates({\n      coordinates: {\n        lat: dataFromAPI.lat,\n        lng: dataFromAPI.lng\n      }\n    });\n    console.log('my coordinates!!!!!', coordinates);\n    console.log('dataFromAPI', dataFromAPI);\n  };\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    geocodeByAddress(value).then(results => getLatLng(results[0])).then(latLng => {\n      console.log('Success', latLng);\n      dataFromAPI = latLng;\n      setCoordinatesFunction(dataFromAPI);\n    }).catch(error => console.error('Error', error));\n    setCoordinates({\n      latLng\n    }); // setLat(latLng.lat)\n    // setLng(latLng.lng)\n\n    console.log('object from api', typeof latLng); // console.log(\"object from api's lat\", latLng.lat)\n    // console.log(\"object from api's lng\", latLng.lng)\n\n    console.log('my lat object', lat);\n    console.log('my lng object', lng);\n    console.log('my coordinates object', coordinates);\n    setUserInput(value);\n    setAddress(value);\n    props.updateAddress(address); // props.updateCoordinates(coordinates)\n\n    localStorage.setItem(\"address\", value);\n    localStorage.setItem(\"coords\", coordinates);\n    navigate('/apartment-view');\n  }; // example lat was 46.9171876\n  // example lng was 17.8951832\n  // const streetViewPanoramaOptions = {\n  //     position: { lat: coordinates.lat, lng: coordinates.lng },\n  //     pov: { heading: 100, pitch: 0 },\n  //     zoom: 1\n  // };\n\n\n  if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: userInput,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Enter Address ...\",\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 45\n              }, this), suggestions.map((suggestion, key) => {\n                const style = suggestion.active ? {\n                  backgroundColor: \"#4287f5\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                key = suggestion.description;\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 45\n                  }, this)\n                }, suggestion.description, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"NOT loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AutoSearch, \"TEDnL0atdSvD7F2C1Kd+ckXvxgA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AutoSearch;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoSearch\");","map":{"version":3,"sources":["/Users/awais01/Desktop/DropIn_FrontEnd/src/components/AutoSearch.js"],"names":["React","useEffect","useState","useNavigate","PlacesAutocomplete","geocodeByAddress","getLatLng","scriptLoader","AutoSearch","props","isScriptLoaded","isScriptLoadSucceed","dataFromAPI","navigate","address","setAddress","userInput","setUserInput","coordinates","setCoordinates","lat","lng","handleChange","value","setCoordinatesFunction","console","log","handleSelect","results","latLng","then","catch","error","updateAddress","localStorage","setItem","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","key","style","active","backgroundColor","cursor","description","process","env","REACT_APP_GOOGLE_MAP_API"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n// import PlacesAutocomplete from 'react-places-autocomplete'\n// import Autocomplete from \"react-google-autocomplete\";\n// import GooglePlacesAutocomplete from 'react-google-places-autocomplete';\n// import ReactStreetview from 'react-streetview';\n\n// import Streetview from 'react-google-streetview';\n\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng,\n} from 'react-places-autocomplete';\nimport scriptLoader from 'react-async-script-loader'\n\n\nfunction AutoSearch(props, isScriptLoaded, isScriptLoadSucceed) {\n    // console.log(props)\n    var dataFromAPI;\n\n    let navigate = useNavigate()\n\n    const [address, setAddress] = useState(\"\")\n\n    //const [lat, setLat] = useState('')\n    //const [lng, setLng] = useState('')\n\n    const [userInput, setUserInput] = useState(\"\")\n\n    const [coordinates, setCoordinates] = useState({\n        lat: null,\n        lng: null,\n    });\n\n    useEffect(() => {\n        // props.updateAddress(address)\n        // props.updateCoordinates(coordinates)\n    }, [])\n\n    const handleChange = (value) => {\n        setUserInput(value)\n    }\n\n    // const handleSelect = (value) => {\n    //     console.log('handle select', address)\n    //     setAddress(value)\n    //     props.updateAddress(address)\n    //     localStorage.setItem(\"address\", value)\n    //     // navigate('/apartment-view')\n\n    //     geocodeByAddress(value)\n    //         .then(results => getLatLng(results[0]))\n    //         .then(latLng => console.log('Success', latLng))\n    // .then(({ lat, lng }) => {\n    //      NProgress.done()\n    //      setCoordinates({ lat : lat, lng : lng })\n    //         .catch(error => console.error('Error', error))\n    //     ;\n    // }\n\n    // const setStates = async (latLng) => {\n    //     setLat(latLng.lat)\n    //     setLng(latLng.lng)\n    //     console.log('my lat object', lat)\n    //     console.log('my lng object', lng)\n    // }\n    const setCoordinatesFunction = (dataFromAPI) => {\n        setCoordinates({coordinates : { lat: dataFromAPI.lat, lng: dataFromAPI.lng}});\n        console.log('my coordinates!!!!!', coordinates);\n        console.log('dataFromAPI', dataFromAPI);\n    }\n\n    const handleSelect = async (value) => {\n\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n\n        geocodeByAddress(value)\n            .then(results => getLatLng(results[0]))\n            .then(latLng => {\n                console.log('Success', latLng);\n                dataFromAPI = latLng;\n                setCoordinatesFunction(dataFromAPI);\n            })\n            .catch(error => console.error('Error', error))\n\n        setCoordinates({ latLng })\n        // setLat(latLng.lat)\n        // setLng(latLng.lng)\n\n        console.log('object from api', typeof (latLng))\n        // console.log(\"object from api's lat\", latLng.lat)\n        // console.log(\"object from api's lng\", latLng.lng)\n        console.log('my lat object', lat)\n        console.log('my lng object', lng)\n        console.log('my coordinates object', coordinates)\n\n        setUserInput(value)\n        setAddress(value)\n\n        props.updateAddress(address)\n        // props.updateCoordinates(coordinates)\n\n        localStorage.setItem(\"address\", value)\n        localStorage.setItem(\"coords\", coordinates)\n\n        navigate('/apartment-view')\n    }\n\n    // example lat was 46.9171876\n    // example lng was 17.8951832\n    // const streetViewPanoramaOptions = {\n    //     position: { lat: coordinates.lat, lng: coordinates.lng },\n    //     pov: { heading: 100, pitch: 0 },\n    //     zoom: 1\n    // };\n\n    if (props.isScriptLoaded && props.isScriptLoadSucceed) {\n        return (\n            <div>\n\n\n                {/* <div style={{\n                    width: '800px',\n                    height: '450px',\n                    backgroundColor: '#eeeeee'\n                }}>\n                    <Streetview\n                        apiKey={process.env.REACT_APP_GOOGLE_MAP_API}\n                        streetViewPanoramaOptions={streetViewPanoramaOptions}\n                    />\n                </div> */}\n\n\n                <PlacesAutocomplete value={userInput} onChange={handleChange} onSelect={handleSelect}>\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                        <div>\n                            <input {...getInputProps({\n                                placeholder: \"Enter Address ...\",\n                                className: 'location-search-input'\n                            })} />\n\n                            <div className=\"autocomplete-dropdown-container\">\n                                {loading && <div>Loading...</div>}\n\n                                {suggestions.map((suggestion, key) => {\n                                    const style = suggestion.active ?\n                                        { backgroundColor: \"#4287f5\", cursor: \"pointer\" } :\n                                        { backgroundColor: \"#ffffff\", cursor: \"pointer\" }\n                                    key = suggestion.description;\n\n                                    return (\n                                        <div key={suggestion.description} {...getSuggestionItemProps(suggestion, { style })}>\n                                            <span>{suggestion.description}</span>\n                                        </div>\n                                    )\n                                })\n\n                                }\n                            </div>\n                        </div>\n                    )}\n                </PlacesAutocomplete>\n\n            </div>\n        )\n    } else {\n        return (\n            <div>NOT loaded</div>\n        )\n    }\n}\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&libraries=places`])(AutoSearch);\n"]},"metadata":{},"sourceType":"module"}